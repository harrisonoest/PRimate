# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
# NOTE: This has been modified to both duplicate and merge commits!
body = """
{%- if version %}
## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%B %d, %Y") }}
{%- else %}
## [unreleased]
{%- endif %}
{%- for group, commits in commits | group_by(attribute="group") -%}
    {%- set commit_list = commits | unique(attribute="message") | filter(attribute="merge_commit", value=false) -%}
    {%- if commit_list | length > 0 %}

### {{ group | striptags | trim | upper_first }}
    {%- for commit in commit_list %}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }}\
    {%- endfor %}
    {%- endif -%}
{%- endfor %}
\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""

# remove the leading and trailing spaces
trim = true

# postprocessors
postprocessors = [
  # Link Jira story numbers in the format [WUKO-xxx] or [wuko-xxx] that may appear within other text
  { pattern = '\[(WUKO-([0-9]+))\]', replace = "[WUKO-${2}:](https://dishtech-dishtv.atlassian.net/browse/WUKO-${2})" },
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Capitalize Jira stories
  { pattern = 'wuko-([0-9]+)', replace = "WUKO-${1}" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->🚀 Features" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^doc", group = "<!-- 3 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
  { message = "^refactor", group = "<!-- 2 -->🚜 Refactor" },
  { message = "^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "^test", group = "<!-- 6 -->🧪 Testing" },
  # Skips commits for the merge from PR branch into the master branch
  # { message = "(into \\'master\\')", skip = true },
  { message = "^chore\\(release\\): ", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore\\(version\\)", skip = true },
  { message = "^chore|^ci", group = "<!-- 7 -->⚙️  Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
  # Skip commits that do not have a body
  { body = "$^", skip = true },
]

# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
